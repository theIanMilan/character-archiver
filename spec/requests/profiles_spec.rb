require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/profiles', type: :request do
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:invalid_attributes) do
    { display_name: '!@#$%^&*(ga' }
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      sign_in user
      profile = create(:profile, user: user, display_name: 'Georgie145')
      get profile_url(profile)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      sign_in user
      profile = create(:profile, user: user, display_name: 'Georgie145')
      get edit_profile_url(profile)
      expect(response).to be_successful
    end
  end

  # describe 'PATCH /update' do
  #   context 'with valid parameters' do
  #     let(:new_attributes) do
  #       { display_name: 'Mother1234' }
  #     end

  #     it 'updates the requested profile' do
  #       sign_in user
  #       profile = create(:profile, user: user)
  #       patch profile_url(profile), params: { profile: new_attributes }
  #       profile.reload
  #       expect(profile.display_name).to eq('Mother1234')
  #     end

  #     it 'redirects to the profile' do
  #       sign_in user
  #       profile = create(:profile, user: user)
  #       patch profile_url(profile), params: { profile: new_attributes }
  #       profile.reload
  #       expect(response).to redirect_to(profile_url(profile))
  #     end
  #   end

  #   context 'with invalid parameters' do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       sign_in user
  #       profile = create(:profile, user: user)
  #       patch profile_url(profile), params: { profile: invalid_attributes }
  #       expect(response).to have_http_status(:found)
  #     end
  #   end
  # end
end
